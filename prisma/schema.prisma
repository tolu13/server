generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  role         Role     @default(TRADER)
  createdAt    DateTime @default(now())
  orders       Order[]
  buyerTrades  Trade[]  @relation("BuyerTrades")
  SellerTrades Trade[]  @relation("SellerTrades")
  wallet       Wallet[] @relation("UserWallet")

  @@map("user")
}

model Asset {
  id         String        @id @default(uuid())
  symbol     String        @unique
  name       String
  createdAt  DateTime      @default(now())
  pairsBase  TradingPair[] @relation("BaseAsset")
  pairsQuote TradingPair[] @relation("QuoteAsset")
  wallet     Wallet[]      @relation("AssetWallet")
}

model TradingPair {
  id           String   @id @default(uuid())
  baseAssetId  String
  quoteAssetId String
  symbol       String   @unique
  createdAt    DateTime @default(now())
  candles      Candle[]
  orders       Order[]
  trade        Trade[]
  baseAsset    Asset    @relation("BaseAsset", fields: [baseAssetId], references: [id])
  quoteAsset   Asset    @relation("QuoteAsset", fields: [quoteAssetId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  pairId     String
  type       OrderType
  side       OrderSide
  price      Float?
  quantity   Float
  filled     Float       @default(0)
  status     OrderStatus @default(OPEN)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  pair       TradingPair @relation(fields: [pairId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  tradesBuy  Trade[]     @relation("BuyOrder")
  tradesSell Trade[]     @relation("SellOrder")
}

model Trade {
  id          String      @id @default(uuid())
  buyOrderId  String
  sellOrderId String
  buyerId     String
  sellerId    String
  price       Float
  quantity    Float
  pairId      String
  timestamp   DateTime    @default(now())
  buyOrder    Order       @relation("BuyOrder", fields: [buyOrderId], references: [id])
  buyer       User        @relation("BuyerTrades", fields: [buyerId], references: [id])
  pair        TradingPair @relation(fields: [pairId], references: [id])
  sellOrder   Order       @relation("SellOrder", fields: [sellOrderId], references: [id])
  seller      User        @relation("SellerTrades", fields: [sellerId], references: [id])
}

model Candle {
  id        String      @id @default(uuid())
  pairId    String
  interval  String
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Float
  timestamp DateTime    @unique
  pair      TradingPair @relation(fields: [pairId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  assetId   String
  balance   Float    @default(0)
  available Float    @default(0)
  locked    Float    @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  asset     Asset    @relation("AssetWallet", fields: [assetId], references: [id])
  user      User     @relation("UserWallet", fields: [userId], references: [id])

  @@unique([userId, assetId])
}

enum Role {
  TRADER
  ADMIN
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  PARTIALLY_FILLED
  FILLED
  CANCELLED
}
