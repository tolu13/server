// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  TRADER
  ADMIN
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus{
  OPEN
  PARTIALLY_FILLED
  FILLED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(TRADER)
  createdAt DateTime @default(now())
  orders    Order[]
  buyerTrades    Trade[]  @relation("BuyerTrades")
  SellerTrades   Trade[]  @relation("SellerTrades")
  wallet         Wallet[] @relation("UserWallet")

  @@map("user")
}

model Asset {
  id        String   @id @default(uuid())
  symbol    String   @unique // e.g. BTC, ETH
  name      String
  createdAt DateTime @default(now())
  pairsBase  TradingPair[] @relation("BaseAsset")
  pairsQuote TradingPair[] @relation("QuoteAsset")
  wallet     Wallet[] @relation("AssetWallet")
}

model TradingPair {
  id         String   @id @default(uuid())
  baseAsset  Asset    @relation("BaseAsset", fields: [baseAssetId], references: [id])
  baseAssetId String
  quoteAsset   Asset    @relation("QuoteAsset", fields: [quoteAssetId], references: [id])
  quoteAssetId String
  symbol       String   @unique // e.g. BTC/USDT
  createdAt  DateTime @default(now())
  orders     Order[]
  candles    Candle[]
  trade      Trade[]
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  pair        TradingPair  @relation(fields: [pairId], references: [id])
  pairId      String
  type        OrderType
  side        OrderSide
  price       Float?        // null for market orders
  quantity    Float
  filled      Float         @default(0)
  status      OrderStatus   @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tradesBuy   Trade[]       @relation("BuyOrder")
  tradesSell  Trade[]       @relation("SellOrder")
}

model Trade {
  id           String   @id @default(uuid())
  buyOrder     Order    @relation("BuyOrder", fields: [buyOrderId], references: [id])
  buyOrderId   String

  sellOrder    Order    @relation("SellOrder", fields: [sellOrderId], references: [id])
  sellOrderId  String

  buyer        User     @relation("BuyerTrades", fields: [buyerId], references: [id])
  buyerId      String

  seller       User     @relation("SellerTrades", fields: [sellerId], references: [id])
  sellerId     String

  price        Float
  quantity     Float
  pair         TradingPair @relation(fields: [pairId], references: [id])
  pairId       String
  timestamp    DateTime    @default(now())
}

model Candle {
  id         String      @id @default(uuid())
  pair       TradingPair @relation(fields: [pairId], references: [id])
  pairId     String
  interval   String      // e.g. "1m", "5m", "1h"
  open       Float
  high       Float
  low        Float
  close      Float
  volume     Float
  timestamp  DateTime    @unique         
}

model Wallet {
  id        String   @id @default(uuid())
  user      User     @relation("UserWallet", fields: [userId], references: [id])
  userId    String
  asset     Asset    @relation("AssetWallet", fields: [assetId], references: [id])
  assetId   String

  balance   Float    @default(0)    // total balance
  available Float    @default(0)    // for trading/withdraw
  locked    Float    @default(0)    // in open orders


  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, assetId])
}
